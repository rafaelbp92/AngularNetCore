{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { loadBooks, loadBooksSuccess } from './book.actions';\nimport { map, mergeMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/book.service\";\nimport * as i2 from \"@ngrx/effects\";\nexport class BookEffects {\n  constructor(service, actions$) {\n    this.service = service;\n    this.actions$ = actions$;\n    this.$loadBooks = createEffect(() => this.actions$.pipe(ofType(loadBooks), mergeMap(() => this.service.getAllBooks().pipe(map(books => ({\n      type: loadBooksSuccess.type,\n      books: books\n    }))))));\n  }\n}\nBookEffects.ɵfac = function BookEffects_Factory(t) {\n  return new (t || BookEffects)(i0.ɵɵinject(i1.BookService), i0.ɵɵinject(i2.Actions));\n};\nBookEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BookEffects,\n  factory: BookEffects.ɵfac\n});","map":{"version":3,"mappings":"AAAA,SAAkBA,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAE7D,SAASC,SAAS,EAAEC,gBAAgB,QAAQ,gBAAgB;AAC5D,SAASC,GAAG,EAAEC,QAAQ,QAAQ,MAAM;;;;AAIpC,OAAM,MAAOC,WAAW;EACtBC,YAAoBC,OAAoB,EAAUC,QAAiB;IAA/C,YAAO,GAAPD,OAAO;IAAuB,aAAQ,GAARC,QAAQ;IAE1D,eAAU,GAAGT,YAAY,CAAC,MACxB,IAAI,CAACS,QAAQ,CAACC,IAAI,CAChBT,MAAM,CAACC,SAAS,CAAC,EACjBG,QAAQ,CAAC,MACP,IAAI,CAACG,OAAO,CACTG,WAAW,EAAE,CACbD,IAAI,CACHN,GAAG,CAAEQ,KAAK,KAAM;MAAEC,IAAI,EAAEV,gBAAgB,CAACU,IAAI;MAAED,KAAK,EAAEA;IAAK,CAAE,CAAC,CAAC,CAChE,CACJ,CACF,CACF;EAbqE;;AAD3DN,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAQ,SAAXR,WAAW;AAAA","names":["createEffect","ofType","loadBooks","loadBooksSuccess","map","mergeMap","BookEffects","constructor","service","actions$","pipe","getAllBooks","books","type","factory"],"sourceRoot":"","sources":["C:\\Users\\rafae\\Documents\\Projects\\linkedin\\AngularNetCore\\AngularNetCore\\ClientApp\\src\\app\\store\\book.effects.ts"],"sourcesContent":["import { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { BookService } from '../services/book.service';\r\nimport { loadBooks, loadBooksSuccess } from './book.actions';\r\nimport { map, mergeMap } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class BookEffects {\r\n  constructor(private service: BookService, private actions$: Actions) {}\r\n\r\n  $loadBooks = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadBooks),\r\n      mergeMap(() =>\r\n        this.service\r\n          .getAllBooks()\r\n          .pipe(\r\n            map((books) => ({ type: loadBooksSuccess.type, books: books }))\r\n          )\r\n      )\r\n    )\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}