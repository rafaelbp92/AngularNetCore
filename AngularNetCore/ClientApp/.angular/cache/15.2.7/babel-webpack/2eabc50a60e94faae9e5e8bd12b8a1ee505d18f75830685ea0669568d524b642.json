{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport * as types from './action.types';\nimport * as bookActions from './book.actions';\nimport { map, mergeMap } from 'rxjs';\nexport class BookEffects {\n  constructor(service, actions$) {\n    this.service = service;\n    this.actions$ = actions$;\n    this.$loadBooks = createEffect(() => this.actions$.pipe(ofType(types.LOAD_BOOKS), mergeMap(() => {\n      return this.service.getAllBooks().pipe(map(books => new bookActions.loadBooksSuccessAction(books)));\n    })));\n  }\n}","map":{"version":3,"mappings":"AAAA,SAAkBA,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAE7D,OAAO,KAAKC,KAAK,MAAM,gBAAgB;AACvC,OAAO,KAAKC,WAAW,MAAM,gBAAgB;AAC7C,SAASC,GAAG,EAAEC,QAAQ,QAAQ,MAAM;AAEpC,OAAM,MAAOC,WAAW;EACtBC,YAAoBC,OAAoB,EAAUC,QAAiB;IAA/C,YAAO,GAAPD,OAAO;IAAuB,aAAQ,GAARC,QAAQ;IAE1D,eAAU,GAAGT,YAAY,CAAC,MACxB,IAAI,CAACS,QAAQ,CAACC,IAAI,CAChBT,MAAM,CAA8BC,KAAK,CAACS,UAAU,CAAC,EACrDN,QAAQ,CAAC,MAAK;MACZ,OAAO,IAAI,CAACG,OAAO,CAChBI,WAAW,EAAE,CACbF,IAAI,CAACN,GAAG,CAAES,KAAK,IAAK,IAAIV,WAAW,CAACW,sBAAsB,CAACD,KAAK,CAAC,CAAC,CAAC;IACxE,CAAC,CAAC,CACH,CACF;EAXqE","names":["createEffect","ofType","types","bookActions","map","mergeMap","BookEffects","constructor","service","actions$","pipe","LOAD_BOOKS","getAllBooks","books","loadBooksSuccessAction"],"sourceRoot":"","sources":["C:\\Users\\rafae\\Documents\\Projects\\linkedin\\AngularNetCore\\AngularNetCore\\ClientApp\\src\\app\\store\\book.effects.ts"],"sourcesContent":["import { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { BookService } from '../services/book.service';\r\nimport * as types from './action.types';\r\nimport * as bookActions from './book.actions';\r\nimport { map, mergeMap } from 'rxjs';\r\n\r\nexport class BookEffects {\r\n  constructor(private service: BookService, private actions$: Actions) {}\r\n\r\n  $loadBooks = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType<bookActions.loadBooksAction>(types.LOAD_BOOKS),\r\n      mergeMap(() => {\r\n        return this.service\r\n          .getAllBooks()\r\n          .pipe(map((books) => new bookActions.loadBooksSuccessAction(books)));\r\n      })\r\n    )\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}